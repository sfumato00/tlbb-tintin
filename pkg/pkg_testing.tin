#NOP Testing module

#CLASS config READ {./config.tin};
#CLASS login READ {./pkg/pkg_login.tin};
#CLASS utils READ {./pkg/pkg_utils.tin};
#CLASS graph read {./pkg/pkg_map_graph.tin};

#ALIAS {conn} {
    #SESSION {$username} {103.10.85.133} {8888};
};

#ALIAS {assert} {
    #IF {@_assertRoomExitsKey{$test[expected_room]}} {
        #ECHO {<cfa> Test: >> $test[name] << SUCCEEDED};
    };
    #ELSE {
        #ECHO {<fac> Test: >> $test[name] << FAILED};
    };
} {5};

#ALIAS {teardown} {
    #ACTION {^你必须连线十秒后才能离开游戏。$} {
        #delay 2 {quit};
    } {1};
    #ACTION {^你正忙着呢，暂时无法离开游戏。$} {
        #delay 2 {quit};
    } {5};

    #EVENT {SESSION DISCONNECTED} {
        #UNACTION {^你必须连线十秒后才能离开游戏。$};
        #UNACTION {^你正忙着呢，暂时无法离开游戏。$};
        #gts #END;
    };

    quit;
};

#ALIAS {td} {
    teardown;
} {5};

#EVENT {VARIABLE UPDATED env[last_reconnect]} {
    teardown;
};

#ALIAS {start_test} {
    
    #FUNCTION Callback {
        #IF {_assertRoomExitsKey{$test[expected_room]}} {
            #VARIABLE {test[complete]} {1};
        };
    };
    #VARIABLE {test[complete]} {0};
    #EVENT {VARIABLE UPDATED test[complete]} {
        #IF {$test[complete] == 1} {
            assert;
        };
    };
    
    #LOCAL _delayInSec {};
    #IF {"$test[timeout]" == ""} {
        #LOCAL _delayInSec {30};
    } {
        #LOCAL _delayInSec {$test[timeout]};
    };
    #DELAY {_delayInSec} {
        assert;
    };
} {5};


#FUNCTION AssertList {
    
    #LOCAL expected %1;
    #LOCAL actual %2;
    #ECHO {expected: $expected, actual: $actual};
    #FOREACH {*expected[%*]} {i} {
        #ECHO {i: $i, expected[$i]: $expected[$i]};
    };
    #FOREACH {*actual[%*]} {i} {
        #ECHO {i: $i, actual[$i]: $actual[$i]};
    };

    #LOCAL m {};
    #LOCAL n {};

    #LIST expected SIZE m;
    #LIST actual SIZE n;

    #IF {$m != $n} {
        #ECHO {<fac>[Error] Expecting size $m, but the actual is $n.};
        #RETURN 0;
    };

    #LOCAL res {1};
    #FOREACH {*expected[%*]} {i} {
        #ECHO {i: $i};
        #ECHO {expected: $expected[$i], actual: $actual[$i]};
        #IF {"$expected[$i]" != "$actual[$i]"} {
            #ECHO {<fac>[Error] Expecting item $i: $expected[$i], but the actual is $actual[$i].};
            #LOCAL res {0};
        };
    };
    #RETURN $res;
}