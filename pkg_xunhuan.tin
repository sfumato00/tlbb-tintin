#NOP 循环

#NOP ------------------------ Alias ----------------------------------
#ALIAS {feedback_loop_master} {

    #LOCAL time {};
    #FORMAT time {%T};
    #NOP #ECHO {[Debug] assert_not_busy: busy until $busy[until], current timestamp: $time};
    #IF {$time < $busy[until]} {
        #RETURN {};
    };

    #LOCAL xiqi {@RestoreFull{$vitals[精神];$vitals[精神_max];$xunhuan[min_restore]}};
    #IF {$xiqi > 0} {
        cmd {xiqi $xiqi};
    };
    
    #IF {$vitals[内力] < $vitals[内力_max] + 1000} {
                
        #LOCAL yunqi {@RestoreFull{$vitals[气血];$vitals[气血_max];$xunhuan[min_restore]}};
        
        #IF {$yunqi > 0} {
            cmd {yunqi $yunqi};
        };
        busy_dazuo $vitals[气血_max];
        #RETURN {};
    } {
        #2 exert transfer $xunhuan[xfer_target];
    };
} {5};


#ALIAS {feedback_loop_xfer} {
    #LOCAL time {};
    #FORMAT time {%T};
    #NOP #ECHO {[Debug] assert_not_busy: busy until $busy[until], current timestamp: $time};
    #IF {$time < $busy[until]} {
        #RETURN {};
    };

    #LOCAL xiqi {@Restore{$vitals[精神];$vitals[精神_max];$xunhuan[min_restore]}};
    #LOCAL yunqi {@RestoreFull{$vitals[气血];$vitals[气血_max];$xunhuan[min_restore]}};

    #IF {$xiqi > 0} {
        cmd {xiqi $xiqi};
    };

    #IF {$yunqi > 0} {
        cmd {yunqi $yunqi};
    };
    #5 exert transfer $xunhuan[xfer_target];
    busy_dazuo $vitals[气血_max];
} {5};

#ALIAS {stop} {
    #ECHO {关闭 循环 模块};
    feedback_loop_idle;
    #CLASS xunhuan kill;
} {5};

#NOP ------------------------ Actions ----------------------------------



#NOP ------------------------ Functions ----------------------------------



#NOP ------------------------ Events ----------------------------------


#EVENT {VARIABLE UPDATED vitals[经验]} {
    #NOP #ECHO {#EVENT {VARIABLE UPDATED vitals[内力]}: feedback_loop;};
    feedback_loop;
};

#EVENT {VARIABLE UPDATED busy[updated]} {
    cmd {hp};
};